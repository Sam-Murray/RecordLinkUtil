}
if(.OVERIDE){
formals(output) <-  formals(func)
}else{
formals(output) <-  formals(func)[!(names(formals(func)) %in% names(valList))]
}
return(output)
}
dfA = generate_record_data(500, zipcode = sample_zips_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = supplyArgs(sample, x = 1960:2000, .OVERIDE = FALSE))
supplyArgs <-  function(func, ..., .OVERIDE = TRUE){
func_name <-   paste0(deparse(substitute(func)), collapse = "")
if(nchar(func_name) >= 50){
func_name <- paste0(substr(func_name, 0, 50), " ... ")
}
if(!(is.function(func)|(class(func) == "function"))){
stop(paste("supplyArgs only accepts functions, but was passed something with class: ", class(func)))
}
if(is.primitive(func)){
stop(paste("supplyArgs was passed primitive function ", func_name, ", but primitive functions are currently unsupported"))
}
#Gets the list of arguments to and values
valList <-  list(...)
#Gets the list of args for func
argList = names(formals(func))
#Checks that the variables being checked are in the list of args for func
if(!all(names(valList) %in% argList)){
stop("All name value pairs passed to supplyArgs must corrispond to a argument of func")
}
output <-  function(){
my_args <- as.list(match.call())
my_args <- my_args[2:length(my_args)]
if(.OVERIDE){
my_args <- c(my_args, valList[!(names(valList) %in% names(my_args))])
}else{
my_args <- c(my_args[!(names(my_args) %in% names(valList))], valList)
}
return(do.call(func,my_args))
}
if(.OVERIDE){
formals(output) <-  formals(func)
}else{
formals(output) <-  formals(func)[!(names(formals(func)) %in% names(valList))]
}
return(output)
}
dfA = generate_record_data(500, zipcode = sample_zips_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = supplyArgs(sample, x = 1960:2000, .OVERIDE = FALSE))
dfA = generate_record_data(s = 500, zipcode = sample_zips_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = supplyArgs(sample, x = 1960:2000, .OVERIDE = FALSE))
arg_list <- list(...)
library(fastLink)
library(RecordLinkUtil)
supplyArgs <-  function(func, ..., .OVERIDE = TRUE){
func_name <-   paste0(deparse(substitute(func)), collapse = "")
if(nchar(func_name) >= 50){
func_name <- paste0(substr(func_name, 0, 50), " ... ")
}
if(!(is.function(func)|(class(func) == "function"))){
stop(paste("supplyArgs only accepts functions, but was passed something with class: ", class(func)))
}
if(is.primitive(func)){
stop(paste("supplyArgs was passed primitive function ", func_name, ", but primitive functions are currently unsupported"))
}
#Gets the list of arguments to and values
valList <-  list(...)
#Gets the list of args for func
argList = names(formals(func))
#Checks that the variables being checked are in the list of args for func
if(!all(names(valList) %in% argList)){
stop("All name value pairs passed to supplyArgs must corrispond to a argument of func")
}
output <-  function(){
my_args <- as.list(match.call())
my_args <- my_args[2:length(my_args)]
if(.OVERIDE){
my_args <- c(my_args, valList[!(names(valList) %in% names(my_args))])
}else{
my_args <- c(my_args[!(names(my_args) %in% names(valList))], valList)
}
return(do.call(func,my_args))
}
if(.OVERIDE){
formals(output) <-  formals(func)
}else{
formals(output) <-  formals(func)[!(names(formals(func)) %in% names(valList))]
}
return(output)
}
#zip_by_pop: Generates random zipcodes with probability proportional to population of that zipcode
zips_by_pop <-  supplyArgs(zipcodesME, distribution = "population")
dfA = generate_record_data(s = 500, zipcode = sample_zips_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = supplyArgs(sample, x = 1960:2000, .OVERIDE = FALSE))
birthyear = supplyArgs(sample, x = 1960:2000, .OVERIDE = FALSE)
dfA = generate_record_data(s = 500, zipcode = sample_zips_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = supplyArgs(sample, x = 1960:2000, .OVERIDE = FALSE))
devtools::load_all()
dfA = generate_record_data(s = 500, zipcode = sample_zips_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = supplyArgs(sample, x = 1960:2000, .OVERIDE = FALSE))
df = map(names(arg_list), ~do.call(arg_list[[.x]],s))
devtools::load_all()
dfA = generate_record_data(s = 500, zipcode = sample_zips_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = supplyArgs(sample, x = 1960:2000, .OVERIDE = FALSE))
dfA = generate_record_data(s = 500, zipcode = sample_zips_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE))
View(dfA)
start_date = as.Date("1/1/2015", "%m/%d/%y")
start_date = as.Date("1/1/2000", "%mm/%dd/%yyyy")
start_date = ymd("2000-1-1")
#zip_by_pop: Generates random zipcodes with probability proportional to population of that zipcode
library(lubridate)
start_date = ymd("2000-1-1")
start_date = ymd("2000-1-1")
start_date_num = as.numeric(start_date)
end_date = ymd("2000-1-3")
end_date_num = as.numeric(end_date)
wrapFunc(func, wrap_func){
wrapFunc <- function(func, wrap_func){
output <-  function(){
my_args <- as.list(match.call())
my_args <- my_args[2:length(my_args)]
return(wrap_func(do.call(func,my_args)))
}
formals(output) <-  formals(func)
return(output)
}
as_date(end_date_num)
dfA = generate_record_data(s = 500, zipcode = sample_zips_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = wrapFunc(supplyArgs(sample, x = start_date_num:end_date_num, replace = TRUE, .OVERIDE = FALSE),as_date))
View(dfA)
#zip_by_pop: Generates random zipcodes with probability proportional to population of that zipcode
library(lubridate)
start_date = ymd("2015-1-1")
start_date_num = as.numeric(start_date)
end_date = ymd("2019-1-3")
end_date_num = as.numeric(end_date)
dfA = generate_record_data(s = 500, zipcode = sample_zips_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = wrapFunc(supplyArgs(sample, x = start_date_num:end_date_num, replace = TRUE, .OVERIDE = FALSE),as_date))
View(dfA)
dfA = generate_record_data(s = 500, town = sample_towns_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = wrapFunc(supplyArgs(sample, x = start_date_num:end_date_num, replace = TRUE, .OVERIDE = FALSE),as_date))
devtools::load_all()
dfA = generate_record_data(s = 500, town = sample_towns_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = wrapFunc(supplyArgs(sample, x = start_date_num:end_date_num, replace = TRUE, .OVERIDE = FALSE),as_date))
View(dfA)
id_col <- function(s){
return(1:s)
}
dfA = generate_record_data(s = 500,
id = id_col,
town = sample_towns_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = wrapFunc(supplyArgs(sample, x = start_date_num:end_date_num, replace = TRUE, .OVERIDE = FALSE),as_date))
View(dfA)
devtools::load_all()
library(fastLink)
library(RecordLinkUtil)
dth_crt = generate_record_data(s = 500,
id = id_col,
town = sample_towns_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = wrapFunc(supplyArgs(sample, x = start_date_num:end_date_num, replace = TRUE, .OVERIDE = FALSE),as_date))
my_list <-  list(c("hi","hello") = "GREETINGS", c("bye", "goodbye") = "FARWELL")
my_list <-  list(c("hi","hello") = "GREETINGS", c("bye", "goodbye") = "FARWELL")
my_list <-  list( "hi" = "GREETINGS", "bye" = "FARWELL")
View(my_list)
my_func(...){return(list(...))}
my_func <- function(...){return(list(...))}
my_func(c("hi","hello") = "GREETINGS", c("bye", "goodbye") = "FARWELL")
my_func(c("hi") = "GREETINGS", c("bye") = "FARWELL")
, "goodbye"
my_func(c("hi") = "GREETINGS", c("bye", "goodbye") = "FARWELL")
my_func("hi" = "GREETINGS", c("bye", "goodbye") = "FARWELL")
my_func(a = "GREETINGS", b = "FARWELL")
my_func(1 = "GREETINGS", 2 = "FARWELL")
my_list <-  list(c("hi","hello"), "GREETINGS", c("bye", "goodbye") ,"FARWELL")
unlist(my_list)
my_list <- unlist(my_list)
ylist <-  list( "hi" = "GREETINGS", "bye" = "FARWELL")
xlist <-  list( "a" = 1, "b" = 2)
union(xlist,ylist)
list(xlist, ylist)
c(xlist, ylist)
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
warnings()
devtools::document()
devtools::document()
library(fastLink)
library(RecordLinkUtil)
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
library(lubridate)
#Start and end dates for death certificate data
start_date = ymd("2015-1-1")
start_date_num = as.numeric(start_date)
end_date = ymd("2019-1-3")
end_date_num = as.numeric(end_date)
dth_crt = generate_record_data(s = 500,
id = id_col,
town = sample_towns_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = wrapFunc(supplyArgs(sample, x = start_date_num:end_date_num, replace = TRUE, .OVERIDE = FALSE),as_date))
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
look <- col_bind(dth_crt, claims)
look <- cbind(dth_crt, claims)
View(look)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
look <- cbind(dth_crt, claims)
View(look)
devtools::load_all()
devtools::load_all()
warning()
warnings()
devtools::load_all()
warnings()
devtools::document()
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
look <- cbind(dth_crt, claims)
View(look)
devtools::load_all()
start_date_num = as.numeric(start_date)
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
modify(my_vars, ~.x + runif)
my_var <-  c(1,2,3)
modify(my_vars, ~.x + runif)
modify(my_var, ~.x + runif)
modify(my_var, ~.x + runif(1))
devtools::load_all()
c
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
library(fastLink)
library(RecordLinkUtil)
dth_crt = generate_record_data(s = 500,
id = id_col,
town = sample_towns_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = wrapFunc(supplyArgs(sample, x = start_date_num:end_date_num, replace = TRUE, .OVERIDE = FALSE),as_date))
#Start and end dates for death certificate data
start_date = ymd("2015-1-1")
start_date_num = as.numeric(start_date)
end_date = ymd("2019-1-3")
end_date_num = as.numeric(end_date)
dth_crt = generate_record_data(s = 500,
id = id_col,
town = sample_towns_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = wrapFunc(supplyArgs(sample, x = start_date_num:end_date_num, replace = TRUE, .OVERIDE = FALSE),as_date))
library(lubridate)
#Start and end dates for death certificate data
start_date = ymd("2015-1-1")
start_date_num = as.numeric(start_date)
end_date = ymd("2019-1-3")
end_date_num = as.numeric(end_date)
dth_crt = generate_record_data(s = 500,
id = id_col,
town = sample_towns_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = wrapFunc(supplyArgs(sample, x = start_date_num:end_date_num, replace = TRUE, .OVERIDE = FALSE),as_date))
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
View(claims)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
devtools::load_all()
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corr_numeric)
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
View(dth_crt)
is.numeric(c(0L,2L))
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
corrupt_numeric(dth_crt$birthyear)
corrupt_numeric(dth_crt$birthyear)
corrupt_numeric(0L)
corrupt_numeric(c(0L,1L)
)
devtools::load_all()
corrupt_numeric(c(0L,1L))
devtools::load_all()
corrupt_numeric(c(0L,1L))
devtools::load_all()
corrupt_numeric(c(0L,1L))
devtools::load_all()
corrupt_numeric(c(0L,1L))
a = 100
b = 10
corrupt_numeric(a+b)
a = 100
b = 10
corrupt_numeric(a+b)
devtools::load_all()
corrupt_numeric(a+b)
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
corrupt_numeric(a+b)
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
a = 100
b = 10
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
View(dth_crt)
dth_crt[["birthyear"]]
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
evaled_args <- map(my_args, eval)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
devtools::document()
devtools::load_all()
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = corrupt_numeric)
View(claims)
look <- cbind(dth_crt, claims)
View(look)
claims <-  corrupt_data(dth_crt, "birthyear" = supplyArgs(corrupt_numeric, scale = 2))
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = supplyArgs(corrupt_numeric, scale = 2))
devtools::document()
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = supplyArgs(corrupt_numeric, scale = 2))
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = supplyArgs(corrupt_numeric, scale = 2))
claims <-  corrupt_data(dth_crt, "birthyear" = supplyArgs(corrupt_numeric, scale = 2))
devtools::load_all()
claims <-  corrupt_data(dth_crt, "birthyear" = supplyArgs(corrupt_numeric, scale = 2))
View(dth_crt)
claims <-  corrupt_data(dth_crt,
"birthyear" = supplyArgs(corrupt_numeric, scale = 2),
"town" = supplyArgs(corrupt_replace, pool = dth_crt$town),
"deathdate" = wrapFunc(wrapFunc(as.numeric,supplyArgs(corrupt_numeric, scale = 7))),as_date)
devtools::document()
devtools::load_all()
claims <-  corrupt_data(dth_crt,
0)
claims <-  corrupt_data(dth_crt,
"birthyear" = supplyArgs(corrupt_numeric, scale = 2),
"town" = supplyArgs(corrupt_replace, pool = dth_crt$town),
"deathdate" = wrapFunc(wrapFunc(as.numeric,supplyArgs(corrupt_numeric, scale = 7))),as_date)
corr_dat = wrapFunc(wrapFunc(as.numeric,supplyArgs(corrupt_numeric, scale = 7)))
View(corr_dat)
corr_dat = wrapFunc(wrapFunc(as.numeric,supplyArgs(corrupt_numeric, scale = 7)))
corr
corr_dat = wrapFunc(wrapFunc(as.numeric,supplyArgs(corrupt_numeric, scale = 7)))
devtools::load_all()
corr_dat = wrapFunc(wrapFunc(as.numeric,supplyArgs(corrupt_numeric, scale = 7)))
corr_dat(start_date)
corr_dat = wrapFunc(wrapFunc(as.numeric,supplyArgs(corrupt_numeric, scale = 7)),as_date)
corr_dat(start_date)
corr_dat(start_date)
corr_dat(start_date)
corr_dat(start_date)
corr_dat(start_date)
corr_dat(start_date)
corr_dat(start_date)
corr_dat(start_date)
claims <-  corrupt_data(dth_crt,
"birthyear" = supplyArgs(corrupt_numeric, scale = 2),
"town" = supplyArgs(corrupt_replace, pool = dth_crt$town),
"deathdate" = wrapFunc(wrapFunc(as.numeric,supplyArgs(corrupt_numeric, scale = 14))),as_date)
claims <-  corrupt_data(dth_crt,
"birthyear" = supplyArgs(corrupt_numeric, scale = 2),
"town" = supplyArgs(corrupt_replace, pool = dth_crt$town),
"deathdate" = wrapFunc(wrapFunc(as.numeric,supplyArgs(corrupt_numeric, scale = 14))),as_date))
claims <-  corrupt_data(dth_crt,
"birthyear" = supplyArgs(corrupt_numeric, scale = 2),
"town" = supplyArgs(corrupt_replace, pool = dth_crt$town),
"deathdate" = wrapFunc(wrapFunc(as.numeric,supplyArgs(corrupt_numeric, scale = 14)),as_date))
look = cbind(dth_crt, claims)
View(look)
claims <-  corrupt_data(dth_crt,
"birthyear" = supplyArgs(corrupt_numeric, error_rate = .6, scale = 1),
"town" = supplyArgs(corrupt_replace, pool = dth_crt$town),
"deathdate" = wrapFunc(wrapFunc(as.numeric,supplyArgs(corrupt_numeric, error_rate = .9,  scale = 14)),as_date))
View(claims)
look = cbind(dth_crt, claims)
View(look)
library(RecordLinkUtil)
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE)
birthyear(5)
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = TRUE)
library(lubridate)
library(RecordLinkUtil)
#Start and end dates for death certificate data
start_date = ymd("2015-1-1")
start_date_num = as.numeric(start_date)
end_date = ymd("2019-1-3")
end_date_num = as.numeric(end_date)
data <- generate_record_data(s = 500,
id = id_col,
town = sample_towns_by_pop,
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = FALSE),
sex = supplyArgs(sample, x = c("M", "F"), replace = TRUE, .OVERIDE = FALSE),
deathdate = wrapFunc(supplyArgs(sample, x = start_date_num:end_date_num, replace = TRUE, .OVERIDE = FALSE),as_date))
dth_crt = data[500,]
dth_crt
birthyear = supplyArgs(sample, x = 1960:2000, replace = TRUE, .OVERIDE = TRUE)
birthyear(5)
sample(5, replace = TRUE)
data <- data.frame(id = id_col(data_size),
town = sample_towns_by_pop(data_size),
birthyear = sample(data_size, x = 1960:2000, replace = TRUE),
sex = sample(data_size, x = c("M", "F"), replace = TRUE),
deathdate = as_date(sample(data_size, x = start_date_num:end_date_num, replace = TRUE)))
data_size = 1000
data <- data.frame(id = id_col(data_size),
town = sample_towns_by_pop(data_size),
birthyear = sample(data_size, x = 1960:2000, replace = TRUE),
sex = sample(data_size, x = c("M", "F"), replace = TRUE),
deathdate = as_date(sample(data_size, x = start_date_num:end_date_num, replace = TRUE)))
View(data)
dth_crt
claims <-  mutate(dth_crt,
birthyear = corrupt_numeric(birthyear, error_rate = .6, scale = 1),
town = corrupt_replace(town, pool = dth_crt$town),
deathdate = as_date(corrupt_numeric(as.numeric(deathdate), error_rate = .9,  scale = 14)))
dth_crt = data[1:500,]
dth_crt
claims <-  mutate(dth_crt,
birthyear = corrupt_numeric(birthyear, error_rate = .6, scale = 1),
town = corrupt_replace(town, pool = dth_crt$town),
deathdate = as_date(corrupt_numeric(as.numeric(deathdate), error_rate = .9,  scale = 14)))
claims <-  mutate(dth_crt,
birthyear = corrupt_numeric(birthyear, error_rate = .6, scale = 1),
town = corrupt_replace(town, pool = dth_crt$town),
deathdate = as_date(corrupt_numeric(as.numeric(deathdate), error_rate = .9,  scale = 14)))
look = cbind(dth_crt, claims)
look
claims <-  mutate(dth_crt,
birthyear = corrupt_numeric(birthyear, error_rate = .3, scale = 1),
town = corrupt_replace(town, pool = dth_crt$town),
deathdate = as_date(corrupt_numeric(as.numeric(deathdate), error_rate = .9,  scale = 14)))
claims <-  mutate(dth_crt,
birthyear = corrupt_numeric(birthyear, error_rate = .3, scale = 1),
town = corrupt_replace(town, pool = dth_crt$town),
deathdate = as_date(corrupt_numeric(as.numeric(deathdate), error_rate = .9,  scale = 14)))
look = cbind(dth_crt, claims)
look
devtools::document()
devtools::load_all()
devtools::install()
devtools::install()
