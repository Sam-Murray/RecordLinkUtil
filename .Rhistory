dfA = data.frame(name = letters[1:3], numbers = 1:3, hi = 1:3)
dfA = data.frame(names = letters[1:3], numbers = 1:3, hi = 1:3)
dfA = data.frame(name = letters[1:3], numbers = 1:3, hi = 1:3)
dfB = data.frame(names = letters[1:3], numbers = 1:3, hi = 1:3)
namesA = names(dfA)
idA = "A."
idB = "B."
namesB = names(dfB)
namesAB = intersect(namesA, namesB)
dup_inds_A = namesA %in% namesAB
namesA[dup_inds_A] = paste0(idA,namesA[dup_inds_A])
dup_inds_B= namesA %in% namesAB
if(length(namesAB != 0)){
dup_inds_A <-  namesA %in% namesAB
namesA[dup_inds_A] <-  paste0(idA,namesA[dup_inds_A])
names(dfA) <-  namesA
dup_inds_B <-  namesB %in% namesAB
namesB[dup_inds_B] <- paste0(idB,namesB[dup_inds_B])
names(dfB) <-  namesB
}
View(dfA)
View(dfB)
source('~/projects/RecordLinkUtil/R/hello.R')
devtools::document()
ls
devtools::install()
return(cbind(dfA[inds[,1], ], dfB[inds[,2], ],p))
devtools::install()
namesA = names(dfA)
namesB = names(dfB)
devtools::install()
devtools::install()
rownames(confusion_matrix) <- c("Detected Link", "Detected Non-Link")
devtools::document()
devtools::install()
devtools::install()
true_matches = inner_join(dfA, dfB, by = c(idColA = idColB))
true_matches = inner_join(dfA, dfB, by = c(idColA = idColB))
devtools::install()
devtools::install()
devtools::install()
devtools::install()
source('~/projects/RecordLinkUtil/R/getConfusion.R', echo=TRUE)
devtools::install()
devtools::document()
devtools::install()
source('~/.active-rstudio-document')
devtools::document()
devtools::load_all()
data_size = 500
rec <- generate_data(data_size)
rec <- generate_record_data(data_size)
error <-  .6
devtools::document()
devtools::load_all()
data_size = 500
rec <- generate_record_data(data_size)
error <-  .6
devtools::document()
devtools::load_all()
data_size = 500
rec <- generate_record_data(data_size)
#'The generated data contains name, birthyear, zipcode, town, sex, and id.
#'
#' @param s The number of samples to generate
#'
#' @return A (s)x6 dataframe containing record information
#' @export
#'
#' @import tidyverse
#' @import dplyr
#' @importFrom readr read_csv
generate_record_data <- function(s){
zips <- sample_zips_by_pop(s)
names <- read_csv("./data/names.csv")$"name" %>%
str_to_upper() %>%
sample(s, replace = TRUE)
names = map_chr(names, ~as.character(.x))
print(names)
birthyear <-  1940:2010 %>%
sample(s, replace = TRUE)
sex <-  c("M","F") %>%
sample(s, replace = TRUE)
df = cbind(id = 1:s, zips,names,"birthyear" = birthyear, "sex" = sex)
df = mutate(df, names = as.character(names), town = as.character(town))
df
}
devtools::document()
devtools::load_all()
data_size = 500
rec <- generate_record_data(data_size)
devtools::document()
devtools::load_all()
rec <- generate_record_data(data_size)
devtools::document()
devtools::document()
rec <- generate_record_data(data_size)
devtools::load_all()
rec <- generate_record_data(data_size)
devtools::document()
devtools::load_all()
rec <- generate_record_data(data_size)
View(rec)
error <-  .6
corrupt_rec <- corrupt_data(rec, c("zipcode","town","names","birthyear"),numeric_cor = c("zipcode","birthyear"),string_cor = c("names"),replace_cor = c("town"),er = error, v = TRUE)
devtools::load_all()
corrupt_rec <- corrupt_data(rec, c("zipcode","town","names","birthyear"),numeric_cor = c("zipcode","birthyear"),string_cor = c("names"),replace_cor = c("town"),er = error, v = TRUE)
devtools::load_all()
devtools::load_all()
error <-  c(.6, .6, .1)
corrupt_rec <- corrupt_data(rec, c("zipcode","town","names","birthyear"),numeric_cor = c("zipcode","birthyear"),string_cor = c("names"),replace_cor = c("town"),er = error, v = TRUE)
corrupt_rec <- corrupt_data(rec, c("zipcode","town","names","birthyear"),numeric_cor = c("zipcode","birthyear"),string_cor = c("names"),replace_cor = c("town"),er = error, v = FALSE)
print("ya")
corrupt_rec <- corrupt_rec[sample(nrow(corrupt_rec)),]
corrupt_rec <- corrupt_data(rec, c("zipcode","town","names","birthyear"),numeric_cor = c("zipcode","birthyear"),string_cor = c("names"),replace_cor = c("town"),er = error, v = FALSE)
View(corrupt_rec)
View(rec)
look = cbind(corrupt_rec, rec)
View(look)
error <-  c(1, 1, .1)
corrupt_rec <- corrupt_data(rec, c("zipcode","town","names","birthyear"),numeric_cor = c("zipcode","birthyear"),string_cor = c("names"),replace_cor = c("town"),er = error, v = FALSE)
look = cbind(corrupt_rec, rec)
View(look)
devtools::install()
pop <- read_csv("./data/pop_data.csv")
library readr
library(readr)
zips <- read_csv("./data/zipcode.csv")
pop <- read_csv("./data/pop_data.csv")
names <- read_csv("./data/names.csv")$"name" %>%
str_to_upper() %>%
sample(s, replace = TRUE)
library(tidyverse)
names <- read_csv("./data/names.csv")$"name" %>%
str_to_upper() %>%
sample(s, replace = TRUE)
names <- read_csv("./data/names.csv")$"name" %>%
str_to_upper()
names <- read_csv("./data/names.csv")
names <- read_csv("./data/names.csv")
View(names)
devtools::use_data(pop, zips, names)
View(zips)
View(rec)
View(pop)
devtools::use_data(pop, zips, names)
devtools::use_data(pop, zips, names)
usethis::use_data(pop, zips, names)
usethis::use_data(pop, zips, names, internal = TRUE)
zips <- read_csv("./data/zipcode.csv")
zips$Zipcode = as.numeric(zips$Zipcode)
# pop <- mutate(pop, zip  = pop$"Zip Code ZCTA",population = pop$`2010 Census Population`) %>% select(zip, population)
pop <- mutate(pop, zip  = `Zip Code ZCTA`, population = `2010 Census Population`) %>% select(zip, population)
pop$zip <- as.numeric(pop$zip)
zips$City <- as.character(zips$City)
pop <- pop[pop$zip %in% zips$Zipcode,]
usethis::use_data(pop, zips, names, internal = TRUE)
usethis::use_data(pop, zips, names, internal = TRUE, overwrite = TRUE)
usethis::use_data(pop, zips, names, internal = TRUE, overwrite = TRUE)
devtools::load_all()
data_size = 500
rec <- generate_record_data(data_size)
devtools::install()
devtools::install()
devtools::install()
devtools::document
devtools::document()
warnings()
devtools::document()
